/*
 * Copyright (C) 2014-2025 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.helger.collection.helper;

import com.helger.annotation.style.ReturnsMutableCopy;
import com.helger.collection.commons.CommonsArrayList;
import com.helger.collection.commons.CommonsHashSet;
import com.helger.collection.commons.CommonsLinkedHashSet;
import com.helger.collection.commons.CommonsTreeSet;
import com.helger.collection.stack.NonBlockingStack;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;

/**
 * Collection helper for primitive data types (boolean, byte, char, double, float, int, long and
 * short).
 *
 * @author Philip Helger
 */
public final class PrimitiveCollectionHelper
{
  private PrimitiveCollectionHelper ()
  {}

  // The code below is generated by MainCreateCollectionHelperCode

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Boolean> createPrimitiveList (@Nullable final boolean... aValues)
  {
    final CommonsArrayList <Boolean> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Byte> createPrimitiveList (@Nullable final byte... aValues)
  {
    final CommonsArrayList <Byte> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Character> createPrimitiveList (@Nullable final char... aValues)
  {
    final CommonsArrayList <Character> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Double> createPrimitiveList (@Nullable final double... aValues)
  {
    final CommonsArrayList <Double> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Float> createPrimitiveList (@Nullable final float... aValues)
  {
    final CommonsArrayList <Float> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Integer> createPrimitiveList (@Nullable final int... aValues)
  {
    final CommonsArrayList <Integer> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Long> createPrimitiveList (@Nullable final long... aValues)
  {
    final CommonsArrayList <Long> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsArrayList <Short> createPrimitiveList (@Nullable final short... aValues)
  {
    final CommonsArrayList <Short> ret = new CommonsArrayList <> ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Boolean> createPrimitiveSet (@Nullable final boolean... aValues)
  {
    final CommonsHashSet <Boolean> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Byte> createPrimitiveSet (@Nullable final byte... aValues)
  {
    final CommonsHashSet <Byte> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Character> createPrimitiveSet (@Nullable final char... aValues)
  {
    final CommonsHashSet <Character> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Double> createPrimitiveSet (@Nullable final double... aValues)
  {
    final CommonsHashSet <Double> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Float> createPrimitiveSet (@Nullable final float... aValues)
  {
    final CommonsHashSet <Float> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Integer> createPrimitiveSet (@Nullable final int... aValues)
  {
    final CommonsHashSet <Integer> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Long> createPrimitiveSet (@Nullable final long... aValues)
  {
    final CommonsHashSet <Long> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsHashSet <Short> createPrimitiveSet (@Nullable final short... aValues)
  {
    final CommonsHashSet <Short> ret = new CommonsHashSet <> ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Boolean> createPrimitiveOrderedSet (@Nullable final boolean... aValues)
  {
    final CommonsLinkedHashSet <Boolean> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Byte> createPrimitiveOrderedSet (@Nullable final byte... aValues)
  {
    final CommonsLinkedHashSet <Byte> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Character> createPrimitiveOrderedSet (@Nullable final char... aValues)
  {
    final CommonsLinkedHashSet <Character> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Double> createPrimitiveOrderedSet (@Nullable final double... aValues)
  {
    final CommonsLinkedHashSet <Double> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Float> createPrimitiveOrderedSet (@Nullable final float... aValues)
  {
    final CommonsLinkedHashSet <Float> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Integer> createPrimitiveOrderedSet (@Nullable final int... aValues)
  {
    final CommonsLinkedHashSet <Integer> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Long> createPrimitiveOrderedSet (@Nullable final long... aValues)
  {
    final CommonsLinkedHashSet <Long> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsLinkedHashSet <Short> createPrimitiveOrderedSet (@Nullable final short... aValues)
  {
    final CommonsLinkedHashSet <Short> ret = new CommonsLinkedHashSet <> ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Boolean> createPrimitiveSortedSet (@Nullable final boolean... aValues)
  {
    final CommonsTreeSet <Boolean> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Byte> createPrimitiveSortedSet (@Nullable final byte... aValues)
  {
    final CommonsTreeSet <Byte> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Character> createPrimitiveSortedSet (@Nullable final char... aValues)
  {
    final CommonsTreeSet <Character> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Double> createPrimitiveSortedSet (@Nullable final double... aValues)
  {
    final CommonsTreeSet <Double> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Float> createPrimitiveSortedSet (@Nullable final float... aValues)
  {
    final CommonsTreeSet <Float> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Integer> createPrimitiveSortedSet (@Nullable final int... aValues)
  {
    final CommonsTreeSet <Integer> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Long> createPrimitiveSortedSet (@Nullable final long... aValues)
  {
    final CommonsTreeSet <Long> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static CommonsTreeSet <Short> createPrimitiveSortedSet (@Nullable final short... aValues)
  {
    final CommonsTreeSet <Short> ret = new CommonsTreeSet <> ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Boolean> createPrimitiveStack (@Nullable final boolean... aValues)
  {
    final NonBlockingStack <Boolean> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final boolean aValue : aValues)
        ret.add (Boolean.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Byte> createPrimitiveStack (@Nullable final byte... aValues)
  {
    final NonBlockingStack <Byte> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final byte aValue : aValues)
        ret.add (Byte.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Character> createPrimitiveStack (@Nullable final char... aValues)
  {
    final NonBlockingStack <Character> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final char aValue : aValues)
        ret.add (Character.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Double> createPrimitiveStack (@Nullable final double... aValues)
  {
    final NonBlockingStack <Double> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final double aValue : aValues)
        ret.add (Double.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Float> createPrimitiveStack (@Nullable final float... aValues)
  {
    final NonBlockingStack <Float> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final float aValue : aValues)
        ret.add (Float.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Integer> createPrimitiveStack (@Nullable final int... aValues)
  {
    final NonBlockingStack <Integer> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final int aValue : aValues)
        ret.add (Integer.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Long> createPrimitiveStack (@Nullable final long... aValues)
  {
    final NonBlockingStack <Long> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final long aValue : aValues)
        ret.add (Long.valueOf (aValue));
    return ret;
  }

  @Nonnull
  @ReturnsMutableCopy
  public static NonBlockingStack <Short> createPrimitiveStack (@Nullable final short... aValues)
  {
    final NonBlockingStack <Short> ret = new NonBlockingStack <> ();
    if (aValues != null)
      for (final short aValue : aValues)
        ret.add (Short.valueOf (aValue));
    return ret;
  }
}
