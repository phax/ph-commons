/*
 * Copyright (C) 2014-2025 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.helger.jaxb.adapter;

import java.util.List;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.helger.annotation.concurrent.Immutable;
import com.helger.annotation.style.UsedInGeneratedCode;
import com.helger.base.clone.CloneHelper;
import com.helger.base.equals.EqualsHelper;
import com.helger.base.hashcode.HashCodeCalculator;
import com.helger.base.hashcode.HashCodeGenerator;
import com.helger.base.reflection.GenericReflection;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.xml.bind.JAXBElement;

/**
 * Misc utility classes for JAXB
 *
 * @author Philip Helger
 * @since 9.2.0
 */
@Immutable
public final class JAXBHelper
{
  private JAXBHelper ()
  {}

  /**
   * Check if two JAXB elements are identical.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj1
   *        First object. May be <code>null</code>.
   * @param aObj2
   *        Second object. May be <code>null</code>.
   * @return <code>true</code> if they are equal.
   * @since v12.0.0
   */
  @UsedInGeneratedCode
  public static boolean equalJAXBElements (@Nullable final JAXBElement <?> aObj1, @Nullable final JAXBElement <?> aObj2)
  {
    if (EqualsHelper.identityEqual (aObj1, aObj2))
      return true;
    if (aObj1 == null || aObj2 == null)
      return false;
    return EqualsHelper.equals (aObj1.getDeclaredType (), aObj2.getDeclaredType ()) &&
           EqualsHelper.equals (aObj1.getName (), aObj2.getName ()) &&
           EqualsHelper.equals (aObj1.getScope (), aObj2.getScope ()) &&
           EqualsHelper.equals (aObj1.isNil (), aObj2.isNil ()) &&
           EqualsHelper.equals (aObj1.getValue (), aObj2.getValue ());
  }

  private static <T> boolean _listEquals (@Nullable final List <T> aObj1,
                                          @Nullable final List <T> aObj2,
                                          @Nonnull BiPredicate <T, T> aEquals)
  {
    if (EqualsHelper.identityEqual (aObj1, aObj2))
      return true;

    if (aObj1 == null || aObj2 == null)
      return false;

    final int nLen = aObj1.size ();
    if (nLen != aObj2.size ())
      return false;
    for (int i = 0; i < nLen; ++i)
      if (!aEquals.test (aObj1.get (i), aObj2.get (i)))
        return false;
    return true;
  }

  /**
   * Check if two lists of JAXB elements are identical.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj1
   *        First list. May be <code>null</code>.
   * @param aObj2
   *        Second list. May be <code>null</code>.
   * @return <code>true</code> if they are equal.
   * @since v12.0.0 RC2
   */
  @UsedInGeneratedCode
  public static boolean equalJAXBElementLists (@Nullable final List <JAXBElement <?>> aObj1,
                                               @Nullable final List <JAXBElement <?>> aObj2)
  {
    return _listEquals (aObj1, aObj2, JAXBHelper::equalJAXBElements);
  }

  /**
   * Get the hashcode of a JAXBElement.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj
   *        JAXBElement to get the hashcode from. May be <code>null</code>.
   * @return the hashcode
   * @since v12.0.0
   */
  @UsedInGeneratedCode
  public static int getHashCode (@Nullable final JAXBElement <?> aObj)
  {
    if (aObj == null)
      return HashCodeCalculator.HASHCODE_NULL;

    int ret = HashCodeCalculator.INITIAL_HASHCODE;
    ret = HashCodeCalculator.append (ret, aObj.getDeclaredType ());
    ret = HashCodeCalculator.append (ret, aObj.getName ());
    ret = HashCodeCalculator.append (ret, aObj.getScope ());
    ret = HashCodeCalculator.append (ret, aObj.isNil ());
    ret = HashCodeCalculator.append (ret, aObj.getValue ());
    return ret;
  }

  private static <T> int _listHashCode (@Nullable final List <T> aList, @Nonnull final ToIntFunction <T> aHashCode)
  {
    if (aList == null)
      return HashCodeCalculator.HASHCODE_NULL;

    final HashCodeGenerator aHCG = new HashCodeGenerator (aList.getClass ());
    for (final T aItem : aList)
      aHCG.append (aHashCode.applyAsInt (aItem));
    return aHCG.getHashCode ();
  }

  /**
   * Get the hashcode of a List of JAXBElements.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aList
   *        List of JAXBElements to get the hashcode from. May be <code>null</code>.
   * @return the hashcode
   * @since v12.0.0 RC2
   */
  @UsedInGeneratedCode
  public static int getListJAXBElementHashCode (@Nullable final List <JAXBElement <?>> aList)
  {
    return _listHashCode (aList, JAXBHelper::getHashCode);
  }

  /**
   * Check if two DOM nodes are identical (recursive).<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj1
   *        First object. May be <code>null</code>.
   * @param aObj2
   *        Second object. May be <code>null</code>.
   * @return <code>true</code> if they are equal.
   * @since v12.0.0
   */
  @UsedInGeneratedCode
  public static boolean equalDOMNodes (@Nullable final Node aObj1, @Nullable final Node aObj2)
  {
    if (EqualsHelper.identityEqual (aObj1, aObj2))
      return true;
    if (aObj1 == null || aObj2 == null)
      return false;

    if (aObj1.getNodeType () != aObj2.getNodeType ())
      return false;
    if (!EqualsHelper.equals (aObj1.getNodeName (), aObj2.getNodeName ()))
      return false;
    if (!EqualsHelper.equals (aObj1.getLocalName (), aObj2.getLocalName ()))
      return false;
    if (!EqualsHelper.equals (aObj1.getNamespaceURI (), aObj2.getNamespaceURI ()))
      return false;
    if (!EqualsHelper.equals (aObj1.getPrefix (), aObj2.getPrefix ()))
      return false;
    if (!EqualsHelper.equals (aObj1.getNodeValue (), aObj2.getNodeValue ()))
      return false;

    // For all children
    final NodeList aNL1 = aObj1.getChildNodes ();
    final NodeList aNL2 = aObj2.getChildNodes ();

    final int nLength = aNL1.getLength ();
    if (nLength != aNL2.getLength ())
      return false;

    for (int i = 0; i < nLength; ++i)
    {
      final Node aChild1 = aNL1.item (i);
      final Node aChild2 = aNL2.item (i);
      if (!equalDOMNodes (aChild1, aChild2))
        return false;
    }

    return true;
  }

  /**
   * Get the hashcode of a DOM Node.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj
   *        DOM node to get the hashcode from. May be <code>null</code>.
   * @return the hashcode
   * @since v12.0.0
   */
  @UsedInGeneratedCode
  public static int getHashCode (@Nullable final Node aObj)
  {
    if (aObj == null)
      return HashCodeCalculator.HASHCODE_NULL;

    HashCodeGenerator aHC = new HashCodeGenerator (aObj).append (aObj.getNodeType ())
                                                        .append (aObj.getNodeName ())
                                                        .append (aObj.getLocalName ())
                                                        .append (aObj.getNamespaceURI ())
                                                        .append (aObj.getPrefix ())
                                                        .append (aObj.getNodeValue ());

    // For all children
    final NodeList aNL = aObj.getChildNodes ();
    final int nLength = aNL.getLength ();
    aHC = aHC.append (nLength);
    for (int i = 0; i < nLength; ++i)
      aHC = aHC.append (getHashCode (aNL.item (i)));
    return aHC.getHashCode ();
  }

  /**
   * Check if two lists of Objects elements are identical.<br>
   * This method is used in the code generated by the ph-jaxb-plugin!
   *
   * @param aObj1
   *        First list. May be <code>null</code>.
   * @param aObj2
   *        Second list. May be <code>null</code>.
   * @return <code>true</code> if they are equal.
   * @since v12.0.0 RC2
   */
  @UsedInGeneratedCode
  public static boolean equalAnyLists (@Nullable final List <Object> aObj1, @Nullable final List <Object> aObj2)
  {
    return _listEquals (aObj1, aObj2, (x, y) -> {
      if (x.getClass () != y.getClass ())
        return false;
      if (x instanceof Node)
        return equalDOMNodes ((Node) x, (Node) y);
      if (x instanceof JAXBElement)
        return equalJAXBElements ((JAXBElement <?>) x, (JAXBElement <?>) y);
      if (x instanceof List <?>)
        return equalAnyLists (GenericReflection.uncheckedCast (x), GenericReflection.uncheckedCast (y));

      // Fallback
      return EqualsHelper.equals (x, y);
    });
  }

  @UsedInGeneratedCode
  public static int getListAnyHashCode (@Nullable final List <Object> aObj1)
  {
    return _listHashCode (aObj1, x -> {
      if (x instanceof Node)
        return getHashCode ((Node) x);
      if (x instanceof JAXBElement)
        return getHashCode ((JAXBElement <?>) x);
      if (x instanceof List <?>)
        return getListAnyHashCode (GenericReflection.uncheckedCast (x));

      // Fallback
      return HashCodeCalculator.hashCode (x);
    });
  }

  @Nullable
  public static <DATATYPE> JAXBElement <DATATYPE> getClonedJAXBElement (@Nullable final JAXBElement <DATATYPE> aObj)
  {
    if (aObj == null)
      return null;

    final DATATYPE aClonedValue = CloneHelper.getClonedValue (aObj.getValue ());
    final JAXBElement <DATATYPE> ret = new JAXBElement <> (aObj.getName (),
                                                           aObj.getDeclaredType (),
                                                           aObj.getScope (),
                                                           aClonedValue);
    ret.setNil (aObj.isNil ());
    return ret;
  }
}
